{"ast":null,"code":"import _regeneratorRuntime from \"/home/sudipta/Desktop/Youtube-covid/covid-19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sudipta/Desktop/Youtube-covid/covid-19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/sudipta/Desktop/Youtube-covid/covid-19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/sudipta/Desktop/Youtube-covid/covid-19-tracker/src/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: true,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function label(tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: {\n      time: {\n        format: \"DD/MM/YY\",\n        tooltipFormat: \"ll\"\n      }\n    },\n    yAxes: {\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n        callback: function callback(value, index) {\n          // Hide the label of every 2nd dataset\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }\n  }\n};\n\nvar buildChartData = function buildChartData(data, casesType) {\n  var chartData = [];\n  var lastDataPoint;\n\n  for (var date in data.cases) {\n    if (lastDataPoint) {\n      var newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph(_ref) {\n  _s();\n\n  var _ref$casesType = _ref.casesType,\n      casesType = _ref$casesType === void 0 ? \"cases\" : _ref$casesType;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  var chartData = buildChartData(data, casesType);\n                  setData(chartData); // console.log(chartData);\n                  //buildChartData(chartData);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          label: casesType,\n          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n          borderColor: \"#CC1034\",\n          data: data,\n          fill: true\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/home/sudipta/Desktop/Youtube-covid/covid-19-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setData","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor","fill"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: true,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n\n    scales: {\n        xAxes: {\n            time: {\n                format: \"DD/MM/YY\",\n                tooltipFormat: \"ll\",\n            },\n        },\n        yAxes: {\n            gridLines:{\n                display:false\n            },\n            ticks: {\n                // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n                callback: function (value, index) {\n                    // Hide the label of every 2nd dataset\n                    return numeral(value).format(\"0a\");\n                },\n               \n            }\n\n        }\n\n    },\n\n};\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\" }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                    // console.log(chartData);\n                    //buildChartData(chartData);\n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                label: casesType,\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                data: data,\n                                fill: true,\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;"]},"metadata":{},"sourceType":"module"}